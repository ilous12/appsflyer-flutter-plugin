# =============================================================================
# RC (Release Candidate) Workflow - Pre-Production Release
# =============================================================================
# 
# Purpose: Creates a release candidate for QA testing before production release.
# This workflow is triggered when a release branch is created or manually.
#
# What it does:
# 1. Validates the release branch naming convention
# 2. Runs full CI pipeline (tests + builds)
# 3. Updates version numbers in relevant files
# 4. Creates a pre-release tag on GitHub
# 5. Optionally notifies team via Slack (placeholder for future)
#
# Branch Convention: releases/X.x.x/X.Y.x/X.Y.Z-rcN
# Example: releases/6.x.x/6.18.x/6.18.0-rc1
# Where: X, Y, Z are version numbers, and lowercase 'x' is literal
#
# Triggers:
# - Push to branches matching releases/** pattern
# - Manual workflow dispatch with version input
#
# =============================================================================

name: RC - Release Candidate

on:
  # Trigger on push to release branches
  push:
    branches:
      - 'releases/**'
  
  # Allow manual triggering with version specification
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 6.18.0-rc1)'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests and builds (for testing workflow only)'
        required: false
        type: boolean
        default: false

# Prevent multiple RC workflows from running simultaneously
concurrency:
  group: rc-release-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel, let it finish

jobs:
  # ===========================================================================
  # Job 1: Validate Release Branch
  # ===========================================================================
  # Ensures the branch follows naming conventions and extracts version info
  # ===========================================================================
  
  validate-release:
    name: üîç Validate Release Branch
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is_rc: ${{ steps.extract-version.outputs.is_rc }}
      is_valid: ${{ steps.extract-version.outputs.is_valid }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üîç Extract and validate version
        id: extract-version
        run: |
          # Determine version from branch name or manual input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
          else
            # Extract version from branch name: releases/X.x.x/X.Y.x/X.Y.Z-rcN
            # Example: releases/6.x.x/6.18.x/6.18.0-rc1
            BRANCH_NAME="${{ github.ref_name }}"
            echo "Branch name: $BRANCH_NAME"
            
            # Extract version using regex
            # Pattern: releases/X.x.x/X.Y.x/X.Y.Z-rcN where x is literal 'x'
            if [[ $BRANCH_NAME =~ releases/([0-9]+)\.x\.x/([0-9]+\.[0-9]+)\.x/([0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+)$ ]]; then
              VERSION="${BASH_REMATCH[3]}"
              MAJOR="${BASH_REMATCH[1]}"
              MAJOR_MINOR="${BASH_REMATCH[2]}"
              
              echo "Extracted version: $VERSION"
              echo "Major version: $MAJOR"
              echo "Major.Minor: $MAJOR_MINOR"
              
              # Validate that version starts with the correct major.minor
              VERSION_PREFIX=$(echo "$VERSION" | grep -oE '^[0-9]+\.[0-9]+')
              if [[ "$VERSION_PREFIX" != "$MAJOR_MINOR" ]]; then
                echo "‚ùå Version mismatch!"
                echo "Expected version to start with: $MAJOR_MINOR"
                echo "Got: $VERSION"
                exit 1
              fi
              
              # Validate that major version matches
              VERSION_MAJOR=$(echo "$VERSION" | grep -oE '^[0-9]+')
              if [[ "$VERSION_MAJOR" != "$MAJOR" ]]; then
                echo "‚ùå Major version mismatch!"
                echo "Expected major version: $MAJOR"
                echo "Got: $VERSION_MAJOR"
                exit 1
              fi
            else
              echo "‚ùå Invalid branch name format!"
              echo "Expected: releases/X.x.x/X.Y.x/X.Y.Z-rcN"
              echo "Example: releases/6.x.x/6.18.x/6.18.0-rc1"
              echo "Got: $BRANCH_NAME"
              exit 1
            fi
          fi
          
          # Validate version format
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
            echo "‚úÖ Valid version format: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_valid=true" >> $GITHUB_OUTPUT
            
            # Check if it's an RC version
            if [[ $VERSION =~ -rc[0-9]+$ ]]; then
              echo "is_rc=true" >> $GITHUB_OUTPUT
              echo "üì¶ This is a Release Candidate"
            else
              echo "is_rc=false" >> $GITHUB_OUTPUT
              echo "üì¶ This is a production version"
            fi
          else
            echo "‚ùå Invalid version format: $VERSION"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # ===========================================================================
  # Job 2: Run CI Pipeline
  # ===========================================================================
  # Reuses the main CI workflow to run tests and builds
  # ===========================================================================
  
  run-ci:
    name: üöÄ Run CI Pipeline
    needs: validate-release
    if: ${{ needs.validate-release.outputs.is_valid == 'true' && github.event.inputs.skip_tests != 'true' }}
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # ===========================================================================
  # Job 3: Update Version Files
  # ===========================================================================
  # Updates pubspec.yaml and other version-related files
  # ===========================================================================
  
  update-version:
    name: üìù Update Version Files
    runs-on: ubuntu-latest
    needs: [validate-release, run-ci]
    if: always() && needs.validate-release.outputs.is_valid == 'true'
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history for proper tagging
      
      - name: üîß Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: üìù Update pubspec.yaml version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Remove -rcN suffix for pubspec.yaml (pub.dev doesn't support pre-release tags)
          PUBSPEC_VERSION=$(echo $VERSION | sed 's/-rc[0-9]*$//')
          
          echo "Updating pubspec.yaml to version: $PUBSPEC_VERSION"
          
          # Update version in pubspec.yaml
          sed -i.bak "s/^version: .*/version: $PUBSPEC_VERSION/" pubspec.yaml
          rm pubspec.yaml.bak
          
          # Verify the change
          echo "Updated pubspec.yaml:"
          grep "^version:" pubspec.yaml
      
      - name: üìù Update Android plugin version constant
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Find and update kPluginVersion in Android constants
          ANDROID_CONSTANTS_FILE="android/src/main/java/com/appsflyer/appsflyersdk/AppsflyerConstants.java"
          
          if [ -f "$ANDROID_CONSTANTS_FILE" ]; then
            echo "Updating Android plugin version to: $VERSION"
            sed -i.bak "s/kPluginVersion = \".*\"/kPluginVersion = \"$VERSION\"/" "$ANDROID_CONSTANTS_FILE"
            rm "${ANDROID_CONSTANTS_FILE}.bak"
            
            echo "Updated Android constants:"
            grep "kPluginVersion" "$ANDROID_CONSTANTS_FILE" || echo "Pattern not found"
          else
            echo "‚ö†Ô∏è Android constants file not found, skipping"
          fi
      
      - name: üìù Update iOS plugin version constant
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Find and update kPluginVersion in iOS constants
          IOS_PLUGIN_FILE="ios/Classes/AppsflyerSdkPlugin.m"
          
          if [ -f "$IOS_PLUGIN_FILE" ]; then
            echo "Updating iOS plugin version to: $VERSION"
            sed -i.bak "s/kPluginVersion = @\".*\"/kPluginVersion = @\"$VERSION\"/" "$IOS_PLUGIN_FILE"
            rm "${IOS_PLUGIN_FILE}.bak"
            
            echo "Updated iOS plugin file:"
            grep "kPluginVersion" "$IOS_PLUGIN_FILE" || echo "Pattern not found"
          else
            echo "‚ö†Ô∏è iOS plugin file not found, skipping"
          fi
      
      - name: üìù Update podspec version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PODSPEC_VERSION=$(echo $VERSION | sed 's/-rc[0-9]*$//')
          
          PODSPEC_FILE="ios/appsflyer_sdk.podspec"
          
          if [ -f "$PODSPEC_FILE" ]; then
            echo "Updating podspec to version: $PODSPEC_VERSION"
            sed -i.bak "s/s\.version.*=.*/s.version          = '$PODSPEC_VERSION'/" "$PODSPEC_FILE"
            rm "${PODSPEC_FILE}.bak"
            
            echo "Updated podspec:"
            grep "s.version" "$PODSPEC_FILE"
          else
            echo "‚ö†Ô∏è Podspec file not found, skipping"
          fi
      
      - name: üíæ Commit version changes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes to commit
          if [[ -n $(git status -s) ]]; then
            git add pubspec.yaml android/ ios/
            git commit -m "chore: bump version to $VERSION"
            git push
            echo "‚úÖ Version changes committed and pushed"
          else
            echo "‚ÑπÔ∏è No version changes to commit"
          fi

  # ===========================================================================
  # Job 4: Create Pre-Release
  # ===========================================================================
  # Creates a GitHub pre-release with the RC tag
  # ===========================================================================
  
  create-prerelease:
    name: üè∑Ô∏è Create Pre-Release
    runs-on: ubuntu-latest
    needs: [validate-release, run-ci, update-version]
    if: always() && needs.validate-release.outputs.is_rc == 'true'
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      
      - name: üìù Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Extract changes from CHANGELOG.md for this version
          echo "Extracting release notes for version $VERSION"
          
          # Create release notes
          cat > release_notes.md << EOF
          # AppsFlyer Flutter Plugin - Release Candidate $VERSION
          
          ## üöÄ Release Candidate for Testing
          
          This is a pre-release version for QA testing. Please do not use in production.
          
          ## üìã Changes
          
          Please refer to [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md) for detailed changes.
          
          ## üß™ Testing Instructions
          
          1. Add to your \`pubspec.yaml\`:
             \`\`\`yaml
             dependencies:
               appsflyer_sdk:
                 git:
                   url: https://github.com/${{ github.repository }}.git
                   ref: $VERSION
             \`\`\`
          
          2. Run \`flutter pub get\`
          3. Test the integration thoroughly
          4. Report any issues to the development team
          
          ## üì¶ SDK Versions
          
          - Android AppsFlyer SDK: (check android/build.gradle)
          - iOS AppsFlyer SDK: (check ios/appsflyer_sdk.podspec)
          
          ---
          
          **Note**: This is a pre-release and should not be used in production applications.
          EOF
          
          echo "Release notes generated"
      
      - name: üè∑Ô∏è Create GitHub Pre-Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release Candidate ${{ needs.validate-release.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: true  # Mark as pre-release
          generate_release_notes: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # ===========================================================================
  # Job 5: Notify Team (Placeholder for Slack Integration)
  # ===========================================================================
  # Sends notification to Slack channel about the RC release
  # ===========================================================================
  
  notify-team:
    name: üì¢ Notify Team
    runs-on: ubuntu-latest
    needs: [validate-release, create-prerelease]
    if: always()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      - name: üìù Extract SDK versions and changelog
        id: extract-info
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          BASE_VERSION=$(echo "$VERSION" | sed 's/-rc[0-9]*$//')
          
          # Extract Android SDK version
          ANDROID_SDK_VERSION=$(grep "implementation 'com.appsflyer:af-android-sdk:" android/build.gradle | sed -n "s/.*af-android-sdk:\([^']*\).*/\1/p" | head -1)
          echo "android_sdk=$ANDROID_SDK_VERSION" >> $GITHUB_OUTPUT
          
          # Extract iOS SDK version
          IOS_SDK_VERSION=$(grep "s.ios.dependency 'AppsFlyerFramework'" ios/appsflyer_sdk.podspec | sed -n "s/.*AppsFlyerFramework',.*'\([^']*\)'.*/\1/p" | head -1)
          echo "ios_sdk=$IOS_SDK_VERSION" >> $GITHUB_OUTPUT
          
          # Extract Purchase Connector versions from build files
          ANDROID_PC_VERSION=$(grep "implementation 'com.appsflyer:purchase-connector:" android/build.gradle | sed -n "s/.*purchase-connector:\([^']*\).*/\1/p" | head -1)
          if [ -z "$ANDROID_PC_VERSION" ]; then
            ANDROID_PC_VERSION="N/A"
          fi
          echo "android_pc=$ANDROID_PC_VERSION" >> $GITHUB_OUTPUT
          
          IOS_PC_VERSION=$(grep "s.ios.dependency 'PurchaseConnector'" ios/appsflyer_sdk.podspec | sed -n "s/.*PurchaseConnector',.*'\([^']*\)'.*/\1/p" | head -1)
          if [ -z "$IOS_PC_VERSION" ]; then
            IOS_PC_VERSION="N/A"
          fi
          echo "ios_pc=$IOS_PC_VERSION" >> $GITHUB_OUTPUT
          
          # Extract changelog for this version (use base version without -rc suffix)
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(awk "/## $BASE_VERSION/,/^## [0-9]/" CHANGELOG.md | grep "^-" | sed 's/^- /‚Ä¢ /' | head -5)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="‚Ä¢ Check CHANGELOG.md for details"
            fi
          else
            CHANGELOG="‚Ä¢ Check release notes for details"
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: üé´ Fetch Jira tickets
        id: jira-tickets
        continue-on-error: true  # Don't fail CI if Jira fetch fails
        run: |
          set +e  # Don't exit on errors
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove -rc suffix for Jira lookup (e.g., 99.99.99-rc1 ‚Üí 99.99.99)
          BASE_VERSION=$(echo "$VERSION" | sed 's/-rc[0-9]*$//')
          # Use base version with 'v' prefix (matches your Jira convention)
          JIRA_FIX_VERSION="Flutter SDK v$BASE_VERSION"
          
          echo "üîç Looking for Jira tickets with fix version: $JIRA_FIX_VERSION"
          
          # Check if Jira credentials are available
          if [[ -z "${{ secrets.CI_JIRA_EMAIL }}" ]] || [[ -z "${{ secrets.CI_JIRA_TOKEN }}" ]]; then
            echo "‚ö†Ô∏è Jira credentials not configured"
            echo "tickets=No assigned fix version found" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          JIRA_DOMAIN="${{ secrets.CI_JIRA_DOMAIN || 'appsflyer.atlassian.net' }}"
          
          # URL-encode the JQL query properly
          JQL_QUERY="fixVersion=\"${JIRA_FIX_VERSION}\""
          # Use curl's --data-urlencode for proper encoding
          ENCODED_JQL=$(echo "$JQL_QUERY" | jq -sRr @uri)
          
          echo "üì° Querying Jira API..."
          echo "Domain: $JIRA_DOMAIN"
          echo "JQL: $JQL_QUERY"
          
          # Query Jira API with error handling and verbose output
          # Using the new /search/jql endpoint as per Jira API v3
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -u "${{ secrets.CI_JIRA_EMAIL }}:${{ secrets.CI_JIRA_TOKEN }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            "https://${JIRA_DOMAIN}/rest/api/3/search/jql?jql=${ENCODED_JQL}&fields=key,summary&maxResults=20")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          
          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "‚ö†Ô∏è Jira API request failed with status $HTTP_CODE"
            echo "Response body (first 500 chars):"
            echo "$BODY" | head -c 500
            echo "tickets=No assigned fix version found" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract ticket keys and create links with summaries
          TICKETS=$(echo "$BODY" | jq -r '.issues[]? | "‚Ä¢ https://'"${JIRA_DOMAIN}"'/browse/\(.key) - \(.fields.summary)"' 2>/dev/null | head -10)
          
          if [ -z "$TICKETS" ]; then
            echo "‚ÑπÔ∏è No linked tickets found for version: $JIRA_FIX_VERSION"
            echo "tickets=No assigned fix version found" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Found Jira tickets:"
            echo "$TICKETS"
            echo "tickets<<EOF" >> $GITHUB_OUTPUT
            echo "$TICKETS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: üì¢ Determine status
        id: status
        run: |
          STATUS="${{ needs.create-prerelease.result }}"
          
          if [[ "$STATUS" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: üì® Send Slack notification (Success)
        if: steps.status.outputs.success == 'true'
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "<!here>\n:flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter:\n\n*Flutter Release Candidate:*\nappsflyer_sdk: ${{ needs.validate-release.outputs.version }} is ready for QA testing.\n\n*Testing Instructions:*\nAdd to pubspec.yaml:\n```\ndependencies:\n  appsflyer_sdk:\n    git:\n      url: https://github.com/${{ github.repository }}.git\n      ref: ${{ needs.validate-release.outputs.version }}\n```\n\n*Sources:*\n:github: https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}\n:github: Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}\n\n*Changes and fixes:*\n${{ steps.extract-info.outputs.changelog }}\n\n*Linked tickets and issues:*\n${{ steps.jira-tickets.outputs.tickets }}\n\n*Native SDK's:*\n:android: ${{ steps.extract-info.outputs.android_sdk }}\n:apple: ${{ steps.extract-info.outputs.ios_sdk }}\n\n*Purchase Connector:*\n:android: ${{ steps.extract-info.outputs.android_pc }}\n:apple: ${{ steps.extract-info.outputs.ios_pc }}\n\n:flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter::flutter:"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CI_SLACK_WEBHOOK_URL }}
      
      - name: üì® Send failure notification
        if: steps.status.outputs.success == 'false'
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "<!here>\n:warning: *Flutter RC Creation Failed*\n\nVersion: ${{ needs.validate-release.outputs.version }}\nBranch: ${{ github.ref_name }}\n\nPlease check the workflow logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CI_SLACK_WEBHOOK_URL }}

  # ===========================================================================
  # Job 6: RC Summary
  # ===========================================================================
  # Provides a summary of the RC release process
  # ===========================================================================
  
  rc-summary:
    name: üìã RC Summary
    runs-on: ubuntu-latest
    needs: [validate-release, run-ci, update-version, create-prerelease]
    if: always()
    
    steps:
      - name: üìä Display RC Summary
        run: |
          echo "========================================="
          echo "RC Release Summary"
          echo "========================================="
          echo "Version: ${{ needs.validate-release.outputs.version }}"
          echo "Is RC: ${{ needs.validate-release.outputs.is_rc }}"
          echo "Is Valid: ${{ needs.validate-release.outputs.is_valid }}"
          echo "-----------------------------------------"
          echo "Validation: ${{ needs.validate-release.result }}"
          echo "CI Pipeline: ${{ needs.run-ci.result }}"
          echo "Version Update: ${{ needs.update-version.result }}"
          echo "Pre-Release: ${{ needs.create-prerelease.result }}"
          echo "========================================="
          
          # Check if all critical jobs succeeded
          if [[ "${{ needs.validate-release.result }}" == "success" ]] && \
             [[ "${{ needs.create-prerelease.result }}" == "success" ]]; then
            echo "‚úÖ RC Release Process Completed Successfully"
            echo ""
            echo "Next Steps:"
            echo "1. Notify QA team to begin testing"
            echo "2. Test the RC version thoroughly"
            echo "3. If approved, proceed with production release"
          else
            echo "‚ùå RC Release Process Failed"
            echo "Please check the logs above for details"
            exit 1
          fi
